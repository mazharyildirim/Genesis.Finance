@implements IDisposable
@using Genesis.WebApp.Models;
@using Genesis.WebApp.Services;
@inject NavigationManager navigationManager
@inject StateService state
@inject UserService userApi

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Genesis.Finance</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
   
</div>
@if (state.IsSignedIn)
{
    <div class="nav-item px-3 navbar-dark" style="color:white;">
        <div class="container-fluid">Hoşgeldiniz, @state.UserResponse.DisplayName</div>
    </div>
}
<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Ana Sayfa
            </NavLink>
        </div>
        @if (state.IsSignedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/UserManagement/UserList">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Kullanıcı Listesi
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/" @onclick="SignOut">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Kullanıcı Çıkışı
                </NavLink>
               
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Login/SignIn">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Kullanıcı Girişi
                </NavLink>
            </div>
        }
        
    </nav>
</div>

@code {
    Genesis.Shared.Users.UserLogin tokens = new();

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        tokens = state.UserResponse;
        state.OnUserChange += Update;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await userApi.PopulateAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
         state.OnUserChange -= Update;
    }

    private void Update()
    {
        tokens = state.UserResponse;
        StateHasChanged();
    }

    public async Task SignOut()
    {
        await userApi.SignOutAsync();
        navigationManager.NavigateTo("/");
    }
}
